<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_wec_solara_admin.biz.prv-entmt-ctrl</name>
        <script><![CDATA[(function () {
    'use strict';

    angular
        .module('twc-product')
        .controller('ProvisionEntitlementCtrl', ProvisionEntitlementCtrl);

    ProvisionEntitlementCtrl.$inject = ['$scope', '$window', 'EntitlementFactory', 'SearchService', 'PackageFactory', 'ManageAccountModalService', 'toastr'];

    function ProvisionEntitlementCtrl($scope, $window, EntitlementFactory, SearchService, PackageFactory, ModalService, toastr) {
		var ctrl = this; 
		
		this.searchPackage = searchPackage;
		this.searchPlan = searchPlan;
		this.searchAccount = searchAccount;
		this.searchExternalContact = searchExternalContact;
		this.searchInternalContact = searchInternalContact;
		this.isAccountTypeOther = isAccountTypeOther;
		this.isExternalContactDisables = isExternalContactDisables;
		this.clearFields = clearFields;
		this.createEntitlement = createEntitlement;
		this.addToEndDateDays = addToEndDateDays;
		this.createAccount = createAccount;
		this.createContact = createContact;
		
		init();
		
		
		function init() {
			ctrl.accountTypes = {
				WEATHER_COMPANY: {text: 'The Weather Company', value: 'WEATHER_COMPANY'},
				OTHER: {text: 'Other', value: 'OTHER'}
			};
			
			ctrl.datepickerOptions = {
				showWeeks: false, 
				minDate: new Date()
			};
			
			ctrl.clearFields();
		}
		
		function clearFields(fieldNames) {
			var defaultFields = {
				accountType: ctrl.accountTypes.OTHER,
				endDate: moment().add(60, 'days').toDate()
			};
			
			if (!fieldNames || !fieldNames.length) {
				ctrl.fields = angular.extend({}, defaultFields);
				return;
			}
			
			fieldNames.forEach(function (name) {
				ctrl.fields[name] = (defaultFields.hasOwnProperty(name)) ? defaultFields[name] : null;
			});
		}
				
		function createEntitlement() {
			var params = {
				pack: ctrl.fields.package,
				plan: ctrl.fields.plan,
				threshold: ctrl.fields.threshold,
				is_send_to_customer: ctrl.fields.isSendToCustomer,
				is_send_to_sales: ctrl.fields.isSendToSales,
				account: ctrl.fields.account,
				contact: ctrl.fields.contact,
				project_name: ctrl.fields.projectName,
				end_date: moment(ctrl.fields.endDate).format('YYYY-MM-DD')
			};
			
			return EntitlementFactory.create(params).$promise.then(
				function (response) {
					toastr.success('Entitlement was successfully created');
				},
				function (response) {
					toastr.error("Something went wrong and your entitlement couldn't be created");					
				}
			);
		}
				
		function createAccount() {
			ModalService.createAccount(false).then(function (data) {
				ctrl.fields.account = data;				
			});
		}
		
		function createContact() {
			ModalService.createContact(ctrl.fields.account.sys_id, true).then(function (data) {
				ctrl.fields.contact = data;				
			});
			
		}

		function addToEndDateDays(days) {
			ctrl.fields.endDate = moment().add(days, 'days').toDate();
		}
		
		function searchPackage(name) {
			return SearchService.searchPackage(name).then(function (response) {
				return response.data.result;
			});			
		}
		
		function searchPlan(name) {
			return SearchService.searchPlan(name).then(function (response) {
				return response.data.result;
			});			
		}
		
		function searchAccount(name) {
			return SearchService.searchAccount(name).then(function (response) {
				return response.data.result;
			});			
		}

		function searchExternalContact(value, account) {
			return SearchService.searchContactByNameOrEmail(value, account.sys_id).then(function (response) {
				return response.data.result;
			});
		}

		function searchInternalContact(value) {
			return SearchService.searchInternalUserByNameOrEmail(value).then(function (response) {
				return response.data.result;
			});
		}
		
		function isAccountTypeOther() {
			return ctrl.fields.accountType === ctrl.accountTypes.OTHER;
		}
		
		function isExternalContactDisables() {
			return !ctrl.fields.account;
		}
    }
})();

]]></script>
        <script_name>biz.prv-entmt-ctrl</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>oleg.voropayev.contractor@weather.com</sys_created_by>
        <sys_created_on>2016-10-19 11:23:05</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>cc9339750f6a2a0034457d4ce1050e33</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>x_wec_solara_admin.biz.prv-entmt-ctrl</sys_name>
        <sys_package display_value="Solara Admin Console" source="x_wec_solara_admin">5ef3dfa60fbdea006c3005cce1050ec2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Solara Admin Console">5ef3dfa60fbdea006c3005cce1050ec2</sys_scope>
        <sys_update_name>sys_ui_script_cc9339750f6a2a0034457d4ce1050e33</sys_update_name>
        <sys_updated_by>oleg.voropayev.contractor@weather.com</sys_updated_by>
        <sys_updated_on>2016-10-20 17:10:23</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
